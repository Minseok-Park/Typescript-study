-- 전역적으로 설치하는 방법 --
타입스크립트 전역적으로 설치 : npm i typescript -g
tsc 명령어 => 타입스크립트를 자바스크립트 형태로 변경시켜줌
tsc --init => 타입 스크립트 설정 파일 생성  (tsconfig.json)
설정 파일 생성 후 tsc 입력하면 타입스크립트 => 자바스크립트 파일로 생성
tsc -w => 계속 tsc를 할 필요없이 파일이 변경될 때 마다 자동으로
컴파일 해줌

-- 해당 프로젝트에 설치하는 방법--
npm init -y => package.json 설정 파일 생성
npm i typescript => 타입스크립트 설치
npx tsc --init => 타입스크립트 설정 파일 생성(tsconfig.json)
npx tsc => 타입스크립트->자바스크립트 변경
npx tsc -w => watch모드로 실행!

npm i typescript -D => devDependencies 안에 설치(개발용 명시)

---------------------------------------------------------------------
(1) strictNullChecks 옵션을 키게 되면 모든 타입에 자동으로 포함되어
있는 null 과 undefined를 제거해 준다.

(2) noImplicitReturns 옵션을 키게 되면 함수 내에서 모든 코드가 값을
리턴하지 않으면, 컴파일 에러를 발생시킨다.

(3) structual type system - 구조가 같으면, 같은 타입으로 취급한다!

(4) nominal type system - 구조가 같아도 이름이 다르면, 다른 타입으로
취급  => (타입스크립트에서는 따르지 않는다)

(5) strictFunctionTypes 옵션을 켜면 함수를 할당할 시에 함수의
매개변수 타입이 같거나 슈퍼타입인 경우가 아닌 경우, 에러를 통해
경고한다.

===============tsconfig ==================
최상위 프로퍼티
* compileOnSave
* extends
* compileOptions
* files
* include
* exclude
* references

어떤 파일을 compile할지 결정 => files, include, exclude
어떤 설정으로 compile할지 => compileOptions

초기 설정 파일에는 compileOnSave가 없음
"compileOnSave" : true 를 추가해주면 저장할 때 마다 컴파일 해준다

"extends" : "파일 (상대) 경로명"  => string으로
"extends" : "./base.json" => base.json 에서 tsconfig.json 기능을 확장하여
작성 가능!

** files, include, exclude => 셋 다 설정이 없으면 ,전부 다 컴파일
- files : 상대 혹은 절대 경로의 리스트 배열, exclude 보다 쌔다
- include : glob 패턴  ex) .gitignore
=> exclude 보다 약하다, * 같은걸 사용하면 .ts/.tsx/.d.ts만 include

- exclude : glob 패턴 ex).gitignore
=> 설정 안하면 4가지(node_modules, bower_components, 
jspm_packages, <outDir>)를 default로 제외한다.
<outDir>은 항상 제외된다. (include에 있어도)

-------------------------------------------------------------
typescript에서 react같은 외부 라이브러리를 사용하려면
npm i --save-dev @types/react 를 설치해야함!

@types => 내장 type definition 시스템
설정을 하지 않으면 => node_modules/@types 라는 모든 경로를 찾아서
사용

typeRoots를 사용하면 => 배열 안에 들어있는 경로들 아래서만 가져옴
types를 사용하면 => 배열 안의 모듈 혹은, ./node_modules/@types/
안의 모듈 이름에서 찾아옴!
[] 빈 배열을 넣으면 이 시스템을 이용하지 않겠다는 뜻!
typeRoots와 types를 같이 사용하지 않는다.!

-----------------------------------------------------------
target 속성 => es3, es5 등 js 버전을 설정함
(target 속성이 없으면 default = es3)
npx tsc를 실행하면 해당 버전에 맞게 js파일로 컴파일 됨

target => 빌드의 결과물을 어떤 버전으로 할 것인지!

lib => 기본 type definition 라이브러리를 어떤 것을 사용할지
lib를 지정하지 않았을 경우!
target이 es3인 경우 => 디폴트는 lib.d.ts
target이 es5인 경우 => 디폴트는 dom, es5, scripthost
target이 es6인 경우 => 디폴트는 dom, es6, iterable, scripthost

lib를 지정하면 그 lib 배열로만 라이브러리를 사용

---------------------------------------------------------------
outDir, rootDir => js로 컴파일 되는 파일을 생성해준다
rootDir : "/src"
outDir : "/dist" 로 설정해준다면
npx tsc로 컴파일 시 => src 폴더 안의 dist 폴더 안에 js 파일이 생성됨

-----------------------------------------------------------------
**** strict 옵션!!!
(1) --noImplicitAny => 명시적이지 않게 any 타입을 사용하여, 표현식과
선언에 사용하면, 에러를 발생
- 타입스크립트가 추론을 실패한 경우, any가 맞으면 any라고 지정해야함
- 아무것도 쓰지 않으면, 에러를 발생

(2) --noImplicitThis => 명시적이지 않게 any 타입을 사용하여 this 표현식에
사용하면 에러를 발생

* 타입스크립트에서는 함수의 첫번째 매개변수 자리에 this를 놓고,
this에 대한 타입을 어떤 것이라도 표현하지 않으면, noImplictAny가
오류를 발생시킴
ex) function add(this, name: string, age: number) {}
==> this를 any로 명시적으로 지정하는 것은 합리적이다!!

(3) --strictNullChcks [매우 중요한 옵션]
-> 적용시 모든 타입은 null, undefined 값을 가질 수 없음
-> 예외 (undefined 에는 void 할당 가능)
=> null 값을 가지려면 const a: number | null; 이런식으로
union type으로 정의해야함
=> any type은 null과 undefined를 가지기 때문에 대입 가능!

(4) --strictPropertyInitialization
-> 정의되지 않은 클래스의 속성이 생성자에서 초기화 되었는지
확인하는 속성!
-> 이 속성을 사용하려면 strictNullChecks를 사용하도록 설정해야함

(5) --alwaysStrict
-> 각 소스 파일에 대해 JavaScript 의 strict mode로 코드를 분석하고,
"엄격하게 사용"을 해제한다.!


