-- 전역적으로 설치하는 방법 --
타입스크립트 전역적으로 설치 : npm i typescript -g
tsc 명령어 => 타입스크립트를 자바스크립트 형태로 변경시켜줌
tsc --init => 타입 스크립트 설정 파일 생성  (tsconfig.json)
설정 파일 생성 후 tsc 입력하면 타입스크립트 => 자바스크립트 파일로 생성
tsc -w => 계속 tsc를 할 필요없이 파일이 변경될 때 마다 자동으로
컴파일 해줌

-- 해당 프로젝트에 설치하는 방법--
npm init -y => package.json 설정 파일 생성
npm i typescript => 타입스크립트 설치
npx tsc --init => 타입스크립트 설정 파일 생성(tsconfig.json)
npx tsc => 타입스크립트->자바스크립트 변경
npx tsc -w => watch모드로 실행!

npm i typescript -D => devDependencies 안에 설치(개발용 명시)

---------------------------------------------------------------------
(1) strictNullChecks 옵션을 키게 되면 모든 타입에 자동으로 포함되어
있는 null 과 undefined를 제거해 준다.

(2) noImplicitReturns 옵션을 키게 되면 함수 내에서 모든 코드가 값을
리턴하지 않으면, 컴파일 에러를 발생시킨다.

(3) structual type system - 구조가 같으면, 같은 타입으로 취급한다!

(4) nominal type system - 구조가 같아도 이름이 다르면, 다른 타입으로
취급  => (타입스크립트에서는 따르지 않는다)

(5) strictFunctionTypes 옵션을 켜면 함수를 할당할 시에 함수의
매개변수 타입이 같거나 슈퍼타입인 경우가 아닌 경우, 에러를 통해
경고한다.





